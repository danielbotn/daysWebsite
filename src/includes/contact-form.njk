<form class="px-20 content-center py-12" x-data="states()">
  <div class="flex flex-wrap -mx-3 mb-6">
    <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
      <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-first-name">
        First Name
      </label>
      <input class="appearance-none block w-full bg-gray-200 text-gray-700 border rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white" id="grid-first-name" type="text" placeholder="First Name" x-bind:class="{ 'border-red-500': firstNameError }">
      <p class="text-red-500 text-xs italic" x-show="firstNameError">Please fill out first name and last name.</p>
    </div>
    <div class="w-full md:w-1/2 px-3">
      <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-last-name">
        Last Name
      </label>
      <input class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="grid-last-name" type="text" placeholder="Last Name" x-bind:class="{ 'border-red-500': lastNameError }">
    </div>
  </div>
  <div class="flex flex-wrap -mx-3 mb-6">
    <div class="w-full px-3">
      <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-password">
        E-mail
      </label>
      <input class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="email" type="email" placeholder="Enter your email" x-bind:class="{ 'border-red-500': emailError }">
      <p class="text-red-500 text-xs italic" x-show="emailError">Please enter valid email address.</p>
    </div>
  </div>
  <div class="flex flex-wrap -mx-3 mb-6">
    <div class="w-full px-3">
      <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-password">
        Message
      </label>
      <textarea class="no-resize appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500 h-48 resize-none" id="message" x-bind:class="{ 'border-red-500': messageError }" placeholder="Please enter your message"></textarea>
      <p class="text-red-500 text-xs italic" x-show="messageError">Please enter your message.</p>
    </div>
  </div>
  <div class="md:flex md:items-center">
    <div class="md:w-1/3">
      <button @click="firstNameError = true; sendEmail()" class="shadow bg-teal-400 hover:bg-teal-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded" type="button">
        Send
      </button>
    </div>
  </div>
  <p class="text-red-500 text-xs italic pt-10" x-show="serverError">Oops, server error.</p>
</form>
<script>
 function states() {
  return {
    inputTypeFN: "",
    firstNameError: false,
    lastNameError: false,
    emailError: false,
    messageError: false,
    show: false,
    serverError: false,
    firstNameErrorTrue() {
      this.firstNameError = true;
    },
    firstNameErrorFalse() {
      this.firstNameError = false;
    },
    lastNameErrorTrue() {
      this.lastNameError = true;
    },
    lastNameErrorFalse() {
      this.lastNameError = false;
    },
    emailErrorFalse() {
      this.emailError = false;
    },
    emailErrorTrue() {
      this.emailError = true;
    },
    emailIsValid(email) {
      return /\S+@\S+\.\S+/.test(email);
    },
    messageErrorFalse() {
      this.messageError = false;
    },
    messageErrorTrue() {
      this.messageError = true;
    },
    serverErrorTrue() {
      this.serverError = true;
    },
    serverErrorFalse() {
      this.serverError = false;
    },
    encryptText(str) {
      return str;
    },
    async sendEmail() {
      const firstName = document.getElementById("grid-first-name").value;
      const lastName = document.getElementById("grid-last-name").value;
      const email = document.getElementById("email").value;
      const message = document.getElementById("message").value;

      if (
        firstName &&
        lastName &&
        message &&
        email &&
        this.emailIsValid(email)
      ) {
        this.firstNameErrorFalse();
        this.lastNameErrorFalse();
        this.emailErrorFalse();
        this.messageErrorFalse();
        const bodyParameters = {
          email: email,
          message: message,
        };
        const response = await fetch(
          "https://days-rest-api.herokuapp.com/email/contactUs",
          {
            method: "post",
            headers: new Headers({
              'Authorization': `Bearer ${this.encryptText('dude')}`, //DAYS_SECRET_KEY
              'Content-Type': 'application/x-www-form-urlencoded'
            }), 
            body: JSON.stringify(bodyParameters),
            headers: { "Content-type": "application/json" },
          }
        );
  
        const myJson = await response.json(); //extract JSON from the http response
        if (myJson.statusCode === 200) {
          this.serverErrorFalse();
        } else {
          this.serverErrorTrue();
        }
        console.log("myJson", myJson);
      } else {
        if (!firstName) {
          this.firstNameErrorTrue();
        }
        if (!lastName) {
          this.lastNameErrorTrue();
        }
        if (!email || !this.emailIsValid(email)) {
          this.emailErrorTrue();
        }
        if (!message) {
          this.messageErrorTrue();
        }
      }
    },
  };
}
</script>
